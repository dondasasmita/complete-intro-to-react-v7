{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>Okay, let&#39;s go integrate this now where context was being used before. Go to App.js:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// delete ThemeContext, useState import</span>\n\n<span class=\"hljs-comment\">// import</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Provider</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-redux&quot;</span>;\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./store&quot;</span>;\n\n<span class=\"hljs-comment\">// delete useState call</span>\n<span class=\"hljs-comment\">// delete ThemeContext</span>\n\n<span class=\"hljs-comment\">// wrap app with</span>\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Provider</span> <span class=\"hljs-attr\">store</span>=<span class=\"hljs-string\">{store}</span>&gt;</span>[â€¦]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Provider</span>&gt;</span></span>;\n</code></pre>\n<p>Feels nice deleting a lot of code, right?</p>\n<p>Just like context makes your store available anywhere in your app, so does Provider.</p>\n<p>Now that Redux is available everywhere, let&#39;s go add it to SearchParams.js</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// replace ThemeContext import</span>\n<span class=\"hljs-comment\">// delete useContext import</span>\n<span class=\"hljs-keyword\">import</span> { useSelector } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-redux&quot;</span>;\n\n<span class=\"hljs-comment\">// replace context and some usestate references</span>\n<span class=\"hljs-keyword\">const</span> animal = <span class=\"hljs-title function_\">useSelector</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> state.<span class=\"hljs-property\">animal</span>);\n<span class=\"hljs-keyword\">const</span> location = <span class=\"hljs-title function_\">useSelector</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> state.<span class=\"hljs-property\">location</span>);\n<span class=\"hljs-keyword\">const</span> breed = <span class=\"hljs-title function_\">useSelector</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> state.<span class=\"hljs-property\">breed</span>);\n<span class=\"hljs-keyword\">const</span> theme = <span class=\"hljs-title function_\">useSelector</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> state.<span class=\"hljs-property\">theme</span>);\n</code></pre>\n<ul>\n<li>This is the newer, hooks-based API for react-redux. This allows you to provide it a selector function that will pluck the bit of state you need from Redux. Very clean, I quite like it. We&#39;ll see the older, connect-based one here in a bit.</li>\n<li>You may wonder why we don&#39;t just do one <code>useSelector</code> call here, return the whole state, and destructure that. Each hook is creating its own subscription and <code>react-redux</code> internally uses the functions you provide to check to see if your subscription changed. If the result of your selector function changes, it&#39;ll notify React to kick off a re-render of this component. Hence it&#39;s important that these subscription functions <em>just</em> grab the state that you care about. Otherwise it will kick off needless re-renders any time <em>any</em> state in your app changes.</li>\n</ul>\n","slug":"providers","title":"Providers","section":"Redux","icon":"database","filePath":"/home/runner/work/complete-intro-to-react-v7/complete-intro-to-react-v7/lessons/15-redux/D-providers.md","nextSlug":"/complete-intro-to-react-v7/lessons/redux/dispatching-actions","prevSlug":"/complete-intro-to-react-v7/lessons/redux/action-creators"}},"__N_SSG":true}